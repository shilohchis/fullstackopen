{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCKjCK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,KCOEC,EAdA,WAMX,OACI,sBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACI,uBACA,2G,gBCVNC,EAAU,aAwBD,EAtBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAChBC,GAAI,IACJd,QAAS,mCACTe,KAAM,2BACNjB,WAAW,GAEf,OAAOY,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAc1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCuE9BK,EAvFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEKlB,MAAK,SAAAmB,GACFT,EAASS,QAElB,IAEH,IAuCMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aAEhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcK,QAAS4B,IACvB,8BACI,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKO,EAAYE,KAAI,SAAC3C,EAAM4C,GAAP,OACb,cAAC,EAAD,CAEI5C,KAAMA,EACNC,iBAAkB,kBAxCX,SAACkB,GACf,sCAAkCA,GAA3C,IACMnB,EAAO8B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAQ/C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACYpB,EAAI4B,GACX1B,MAAK,SAAA2B,GACFjB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAOgD,SAEtDC,OAAM,SAAAC,GACHb,EAAgB,SAAD,OAAUrC,EAAKK,QAAf,sCACf8C,YAAW,WACPd,EAAgB,QACjB,QA0B6Be,CAAmBpD,EAAKmB,MAF3CyB,QAMjB,uBAAMS,SA7DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfnD,QAAS2B,EACTZ,MAAM,IAAIqC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAGvBtB,EACQiB,GACPnC,MAAK,SAAA2B,GACFjB,EAASD,EAAMN,OAAOwB,IACtBf,EAAW,QAgDX,UACI,uBACI6B,MAAO9B,EACP+B,SA7BS,SAACT,GACtBrB,EAAWqB,EAAMU,OAAOF,UA8BhB,wBAAQG,KAAK,SAAb,qBAEJ,cAAC,EAAD,Q,MCnFZC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7808011d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important';\n\n    return (\n        <li className=\"note\">\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n};\n\nexport default Note;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    );\n};\n\nexport default Notification;\n","import React from 'react';\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    };\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n            </div>\n    );\n}\n\nexport default Footer;\n","import axios from 'axios';\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    };\n    return request.then(response => response.data.concat(nonExisting));\n    //return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport noteService from './services/notes';\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('');\n    const [showAll, setShowAll] = useState(true);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n        });\n    }, []);\n\n    const addNote = (event) => {\n        event.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1,\n        };\n\n        noteService\n        .create(noteObject)\n        .then(returnedNote => {\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        });\n    }\n\n    const toggleImportanceOf = (id) => {\n        const url = `http://localhost:3001/notes/${id}`;\n        const note = notes.find(n => n.id === id);\n        const changedNote = { ...note, important: !note.important };\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n            })\n            .catch(error => {\n                setErrorMessage(`Note '${note.content}' was already removed from server`);\n                setTimeout(() => {\n                    setErrorMessage(null);\n                }, 5000);\n            });\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value);\n    };\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important);\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all' }\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}